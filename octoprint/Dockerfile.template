# Octoprint itself
ARG OP_MACHINE_NAME

FROM balenalib/${OP_MACHINE_NAME:-%%RESIN_MACHINE_NAME%%}-debian:buster

SHELL ["/bin/bash", "-c"]

# Balena /bin/sh stub is supposed to cleanup itself, but loops when initally called by apt...
# https://github.com/balena-io-library/base-images/issues/637
RUN [[ -f /bin/sh.real ]] && rm /bin/sh && mv /bin/sh.real /bin/sh

RUN apt-get update && \
    apt-get install python-pip python-dev python-setuptools virtualenv \
            python-virtualenv git libyaml-dev build-essential ffmpeg dbus \
            jq zlib1g-dev libjpeg62-turbo-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /opt/octoprint/OctoPrint

ARG release

# Travis often fails in getting latest octoprint release, this is why we
# have this while/re-try loop...
RUN if [ "${release}" = "latest" ]; then \
      i=0; \
      while true; do \
        i=$(expr $i + 1); \
        release=$(curl --silent --location https://api.github.com/repos/foosel/OctoPrint/releases/latest | jq -r .tag_name); \
        [ "${release}" = "null" -a $i -lt 10 ] || break;\
        echo "Cannot get release info -- retrying"; \
        sleep 10; \
      done; \
    fi; \
    echo "Building Octoprint ${release}"; \
    git clone --branch "${release}" https://github.com/foosel/OctoPrint.git /opt/octoprint/OctoPrint && \
    virtualenv venv && \
      ./venv/bin/python setup.py install 

WORKDIR /opt/octoprint

COPY bin bin/
COPY etc etc/

VOLUME /opt/octoprint/data

EXPOSE 5000

CMD ["/opt/octoprint/bin/run.sh"]
